# When would you want to use a remote repository rather than keeping all your work
local?
      When i'm working on project/projects so that i can keep other versions in case of
      anything.
      If i'm working on something and in a few days i'll be travelling and i want to
      continue working on the file elsewhere
      and i'm using another computer.

     ** git remote **
     Used when you want to push a local file to github remote server.

     Process: Make sure you are where you initialized git version control system that is,
     the file.
     Run git remote add origin URL github provides once you've named and created the
     repository
     (labelled for command line).
     Verify if URL has been accepted in your machine (output: fetch and push links the
     same).
     Use git push origin master to upload to your created repository on github.

# Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	I suppose this alludes to Git pulling all the changes including those you didn't want
	to pull in the first place.

# Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

	** git fork ** [use in github only]
	Only applies to github, however, it is the same as the clone.
	side effects include:
	keeps track of forks
	forks link back to the original
	suggesting changes easier

	** git clone ** [github to local]
	Kage Bushin no jutsu [Naruto]
	Make a replica of the original repo.

	** git branch ** [either though local makes it easier to look into]
	applies when you want to make different versions of the master repo

# What is the benefit of having a copy of the last known state of the remote stored
locally?

	In case you want to work on it and you don't have an internet connection, if you have
	an extra copy it gives peace of mind if make a major error or retrace an error.

	** git fetch **
	if they are conflicts between local repo and the remote repo. Where they are both
	updated. Then run git fetch origin/master and run git merge master origin/master
	Commit changes after fixing the conflict with message for instance,
	merge remote-tracking branch "origin/master"

	** git pull **
	Does the same thing as fetch. Though, you'll have to just commit the changes made.
	Then push changes in either.

# How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
	I would use Google Drive or SVN depending on the file in question.
	Easier: To see updates on changes in files
	Harder: To take advantage of the features that Git provides like commit ids, local
	and remote repositories and easy collaboration. Additionally, access to history
	via commits when using git log

	I have never used SVN so i don't know it.

# When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
	For the first question, maybe your making another version of the program written in
	another language or you want to make an experimental feature and you don't want to
	merge with the master until you've done enough tests on the feature.

	Second, The branches could help in collaboration maybe you want different perspectives
	of a project then you see other peoples ideas and decide on which is the best course
	of action. As for using master only maybe if there are a lot of branches one can get
	confused. Consequently, having something in one place is a better. Centralised in
	short.





